/**
 * Copyright (c) 2008-2015, Massachusetts Institute of Technology (MIT)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its contributors
 * may be used to endorse or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package edu.mit.ll.nics.common.entity;

// Generated Sep 30, 2011 1:24:44 PM by Hibernate Tools 3.4.0.CR1
import java.util.Calendar;
import java.util.Date;
import java.util.Iterator;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import org.hibernate.annotations.Proxy;
import org.hibernate.annotations.Type;
import org.json.JSONException;
import org.json.JSONObject;

import com.vividsolutions.jts.geom.Geometry;

/**
 * Feature generated by hbm2java
 */
@Entity
@Proxy(lazy=false)
@Table(name = "feature")
public class HibernateFeature extends SADisplayMessageEntity implements SADisplayPersistedEntity {

	private String featureid;
	private String version;
	//private Usersession usersession;
	private String type;
	private String strokeColor;
	private Double strokeWidth;
	private String fillColor;
	private String dashStyle;
	private Double opacity;
	private Double rotation;
	private boolean gesture = false;
	private String graphic;
	private Double graphicHeight;
	private Double graphicWidth;
	private Boolean hasGraphic;
	private Double labelsize;
	private String labelText;
	private String username;
	private String nickname;
	private String topic;
	private String time;
	private String ip;
	//private long seqtime;
	//private long seqnum;
	private Integer usersessionid;
	private Date lastupdate;
	private Geometry geometry;
	private Double pointRadius;
	//private Set<UserFeature> userfeatures;
	//private Set<CollabroomFeature> collabroomfeatures;
	private String featureattributes;
	
	public HibernateFeature() {
		this.setLastupdate(Calendar.getInstance().getTime());
	}

	@Id
	@Column(name = "featureid", unique = true, nullable = false)
	public String getFeatureid() {
		return this.featureid;
	}

	public void setFeatureid(String featureid) {
		this.featureid = featureid;
	}

	@Column(name = "version", nullable = false, length = 12)
	public String getVersion() {
		return this.version;
	}

	public void setVersion(String version) {
		this.version = version;
	}

	/*@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "usersessionid", insertable=false, updatable = false)
	public Usersession getUsersession() {
		return this.usersession;
	}

	public void setUsersession(Usersession usersession) {
		this.usersession = usersession;
	}*/

	@Column(name = "type", nullable = false, length = 32)
	public String getType() {
		return this.type;
	}

	public void setType(String type) {
		this.type = type;
	}
	
	@Column(name = "strokecolor", length = 8)
	public String getStrokeColor() {
		return this.strokeColor;
	}

	public void setStrokeColor(String strokeColor) {
		this.strokeColor = strokeColor;
	}

	@Column(name = "strokewidth", precision = 17, scale = 17)
	public Double getStrokeWidth() {
		return this.strokeWidth;
	}

	public void setStrokeWidth(Double strokeWidth) {
		this.strokeWidth = strokeWidth;
	}

	@Column(name = "fillcolor", length = 8)
	public String getFillColor() {
		return this.fillColor;
	}

	public void setFillColor(String fillColor) {
		this.fillColor = fillColor;
	}

	@Column(name = "dashstyle", length = 32)
	public String getDashStyle() {
		return this.dashStyle;
	}

	public void setDashStyle(String dashStyle) {
		this.dashStyle = dashStyle;
	}
	
	@Column(name = "pointradius", precision = 17, scale = 17)
	public Double getPointRadius() {
		return this.pointRadius;
	}

	public void setPointRadius(Double pointRadius) {
		this.pointRadius = pointRadius;
	}

	@Column(name = "opacity", precision = 17, scale = 17)
	public Double getOpacity() {
		return this.opacity;
	}

	public void setOpacity(Double opacity) {
		this.opacity = opacity;
	}

	@Column(name = "rotation", precision = 17, scale = 17)
	public Double getRotation() {
		return this.rotation;
	}

	public void setRotation(Double rotation) {
		this.rotation = rotation;
	}

	@Column(name = "graphicurl", length = 256)
	public String getGraphic() {
		return this.graphic;
	}

	public void setGraphic(String graphic) {
		this.graphic = graphic;
	}
	
	@Column(name = "graphicheight", precision = 17, scale = 17)
	public Double getGraphicHeight() {
		return this.graphicHeight;
	}

	public void setGraphicHeight(Double graphicHeight) {
		this.graphicHeight = graphicHeight;
	}

	@Column(name = "graphicwidth", precision = 17, scale = 17)
	public Double getGraphicWidth() {
		return this.graphicWidth;
	}

	public void setGraphicWidth(Double graphicWidth) {
		this.graphicWidth = graphicWidth;
	}

	@Column(name = "hasgraphic")
	public Boolean getHasGraphic() {
		return this.hasGraphic;
	}

	public void setHasGraphic(Boolean hasGraphic) {
		this.hasGraphic = hasGraphic;
	}

	@Column(name = "labelsize", precision = 17, scale = 17)
	public Double getLabelsize() {
		return this.labelsize;
	}

	public void setLabelsize(Double labelsize) {
		this.labelsize = labelsize;
	}

	@Column(name = "labeltext", length = 100)
	public String getLabelText() {
		return this.labelText;
	}

	public void setLabelText(String labelText) {
		this.labelText = labelText;
	}

	@Column(name = "username", nullable = false, length = 100)
	public String getUsername() {
		return this.username;
	}

	public void setUsername(String user) {
		this.username = user;
	}

	@Column(name = "nickname", nullable = false, length = 32)
	public String getNickname() {
		return this.nickname;
	}

	public void setNickname(String nickname) {
		this.nickname = nickname;
	}

	@Column(name = "topic", nullable = false, length = 96)
	public String getTopic() {
		return this.topic;
	}

	public void setTopic(String topic) {
		this.topic = topic;
	}

	@Column(name = "time", nullable = false, length = 24)
	public String getTime() {
		return this.time;
	}

	public void setTime(String time) {
		this.time = time;
	}

	@Column(name = "ip", nullable = false, length = 15)
	public String getIp() {
		return this.ip;
	}

	public void setIp(String ip) {
		this.ip = ip;
	}

	/*@Column(name = "seqtime")
	public long getSeqtime() {
		return this.seqtime;
	}

	public void setSeqtime(long seqtime) {
		this.seqtime = seqtime;
	}

	@Column(name = "seqnum")
	public long getSeqnum() {
		return this.seqnum;
	}

	public void setSeqnum(long seqnum) {
		this.seqnum = seqnum;
	}*/

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "lastupdate", nullable = false, length = 29)
	public Date getLastupdate() {
		return this.lastupdate;
	}

	public void setLastupdate(Date lastupdate) {
		this.lastupdate = lastupdate;
	}

	@Type(type="org.hibernate.spatial.GeometryType")
	@Column(name = "the_geom")
	public Geometry getTheGeom() {
		return this.geometry;
	}

	public void setTheGeom(Geometry theGeom) {
		this.geometry = theGeom;
		if(this.geometry != null){
			this.geometry.setSRID(3857);
		}
	}
	
	/**
	 * @return the usersession id
	 */
	@Column(name="usersessionid", nullable=false)
	public Integer getUsersessionid() {
		return this.usersessionid;
	}

	/**
	 * @param room the usersessionid
	 */
	public void setUsersessionid(Integer id) {
		this.usersessionid = id;
	}
	
	/*@OneToMany(fetch = FetchType.LAZY, mappedBy = "feature", cascade = {CascadeType.REMOVE})
    public Set<UserFeature> getUserfeatures() {
        return this.userfeatures;
    }

    public void setUserfeatures(Set<UserFeature> userfeatures) {
        this.userfeatures = userfeatures;
    }
	
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "feature", cascade = {CascadeType.REMOVE})
    public Set<CollabroomFeature> getCollabroomfeatures() {
        return this.collabroomfeatures;
    }

    public void setCollabroomfeatures(Set<CollabroomFeature> collabroomfeatures) {
        this.collabroomfeatures = collabroomfeatures;
    }*/
	
	
	/**
	 * @return the gesture
	 */
	@Transient
	public boolean isGesture() {
		return gesture;
	}

	/**
	 * @param gesture the gesture to set
	 */
	public void setGesture(boolean gesture) {
		this.gesture = gesture;
	}
	
	@Column(name="attributes")
	public String getFeatureattributes()
	{
		return featureattributes;
	}
	
	public void setFeatureattributes(String featureattributes)
	{
		this.featureattributes = encodeJSONObject(featureattributes);
	}
	
	public String toHistoryJSON() throws JSONException{
		JSONObject hist = new JSONObject();
		hist.put("history", this.toJSONObject());
		return hist.toString();
	}
	
	public String toJSONString(){
		try{
			return this.toJSONObject().toString();
		}catch(JSONException e){
			return null;
		}
	}
	
	public JSONObject buildAttributes(){
		JSONObject json = new JSONObject();
		try{
			json.put("strokeColor", this.strokeColor);
			json.put("strokeWidth", this.strokeWidth);
			json.put("fillColor", this.fillColor);
			json.put("dashStyle", this.dashStyle);
			json.put("opacity", this.opacity);
			json.put("rotation", this.rotation);
			json.put("gesture", this.gesture);
			json.put("graphic", this.graphic);
			json.put("graphicHeight", this.graphicHeight);
			json.put("graphicWidth", this.graphicWidth);
			json.put("hasGraphic", this.hasGraphic);
			json.put("labelsize", this.labelsize);
			json.put("labelText", this.labelText);
			json.put("pointRadius", this.pointRadius);
			json.put("type", this.type);
			json.put("user", this.username);
			json.put("created", this.time);
			json.put("featureattributes", this.featureattributes);
			json.put("lastupdate", this.lastupdate);
		}catch(Exception e){
			e.printStackTrace();
		}
		return json;
	}
	
        @Override
	public JSONObject toJSONObject() throws JSONException{
		JSONObject obj = new JSONObject();
		JSONObject fromObj = new JSONObject();
		
		fromObj.put("user", this.username);
		fromObj.put("nickname", this.nickname);
		obj.put("from", fromObj);
		obj.put("attributes", this.buildAttributes());
		if(this.geometry != null){
			obj.put("theGeom", this.geometry.toString());
		}
		obj.put("featureid", this.featureid);
		obj.put("type", this.type);
		obj.put("time", this.time);
		obj.put("version", this.version);
		obj.put("ip", this.ip);
		obj.put("topic", this.topic);
		obj.put("usersessionid", this.usersessionid);
		return obj;
	}
}