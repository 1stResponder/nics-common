/**
 * Copyright (c) 2008-2016, Massachusetts Institute of Technology (MIT)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its contributors
 * may be used to endorse or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package edu.mit.ll.nics.common.entity;

// Generated Aug 19, 2013 3:24:55 PM by Hibernate Tools 4.0.0

import java.util.HashSet;
import java.util.Set;

import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import org.hibernate.annotations.Proxy;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import edu.mit.ll.nics.common.entity.SADisplayMessageEntity;
import edu.mit.ll.nics.common.entity.SADisplayPersistedEntity;

/**
 * Assignment generated by hbm2java
 */
@Entity
@Proxy(lazy=false)
@Table(name = "assignment", schema = "public")
public class Assignment extends SADisplayMessageEntity implements SADisplayPersistedEntity {

	private AssignmentId id;
	private Unit unit;
	private OperationalPeriod operationalPeriod;
	private boolean published;
	private Set<TaskAssign> taskAssigns = new HashSet<TaskAssign>(0);
	private Set<ResourceAssign> resourceAssigns = new HashSet<ResourceAssign>(0);

	public Assignment() {
	}

	public Assignment(AssignmentId id, Unit unit,
			OperationalPeriod operationalPeriod, boolean published) {
		this.id = id;
		this.unit = unit;
		this.operationalPeriod = operationalPeriod;
		this.published = published;
	}

	public Assignment(AssignmentId id, Unit unit,
			OperationalPeriod operationalPeriod, boolean published,
			Set<TaskAssign> taskAssigns, Set<ResourceAssign> resourceAssigns) {
		
		this.id = id;
		this.unit = unit;
		this.operationalPeriod = operationalPeriod;
		this.published = published;
		this.taskAssigns = taskAssigns;
		this.resourceAssigns = resourceAssigns;
	}

	@EmbeddedId
	@AttributeOverrides({
			@AttributeOverride(name = "unitId", column = @Column(name = "unit_id", nullable = false)),
			@AttributeOverride(name = "operationalPeriodId", column = @Column(name = "operational_period_id", nullable = false)) })
	public AssignmentId getId() {
		return this.id;
	}

	public void setId(AssignmentId id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "unit_id", nullable = false, insertable = false, updatable = false)
	public Unit getUnit() {
		return this.unit;
	}

	public void setUnit(Unit unit) {
		this.unit = unit;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "operational_period_id", nullable = false, insertable = false, updatable = false)
	public OperationalPeriod getOperationalPeriod() {
		return this.operationalPeriod;
	}

	public void setOperationalPeriod(
			OperationalPeriod operationalPeriod) {
		this.operationalPeriod = operationalPeriod;
	}

	@Column(name = "published", nullable = false)
	public boolean isPublished() {
		return this.published;
	}

	public void setPublished(boolean published) {
		this.published = published;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "assignment")
	public Set<TaskAssign> getTaskAssigns() {
		return this.taskAssigns;
	}

	public void setTaskAssigns(Set<TaskAssign> taskAssigns) {
		this.taskAssigns = taskAssigns;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "assignment")
	public Set<ResourceAssign> getResourceAssigns() {
		return this.resourceAssigns;
	}

	public void setResourceAssigns(Set<ResourceAssign> resourceAssigns) {
		this.resourceAssigns = resourceAssigns;
	}

	@Override
	public JSONObject toJSONObject() {
		try {
			JSONObject object = new JSONObject();
			// TODO: need a way to reference this actual id in the db, not
			// 		 the AssignmentId object
			if(this.unit != null) {
				object.put("unit", this.unit.toJSONObject());
			}
			
			if(this.operationalPeriod != null) {
				object.put("operationalPeriod", this.operationalPeriod.toJSONObject());
			}
			
			if(this.taskAssigns != null) {
				JSONArray tasks = new JSONArray();
				for(TaskAssign t : this.taskAssigns) {
					tasks.put(t.toJSONObject());
				}
				object.put("taskAssigns", tasks);
			}
			
			if(this.resourceAssigns != null) {
				JSONArray resources = new JSONArray();
				for(ResourceAssign r : this.resourceAssigns) {
					resources.put(r.toJSONObject());
				}
				object.put("resourcesAssigns", resources);
			}
			
			return object;
		} catch (JSONException e) {}
		
		return null;
	}

}
