/**
 * Copyright (c) 2008-2016, Massachusetts Institute of Technology (MIT)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its contributors
 * may be used to endorse or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package edu.mit.ll.nics.common.entity;

// Generated Sep 30, 2011 1:24:44 PM by Hibernate Tools 3.4.0.CR1

import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.annotations.Proxy;
import org.json.JSONException;
import org.json.JSONObject;

/**
 * Contact generated by hbm2java
 */
@Entity
@Proxy(lazy=false)
@Table(name = "contact")
@SequenceGenerator(
	name="SEQ_STORE",
	sequenceName="contact_seq",
	allocationSize=1
)
public class Contact extends SADisplayMessageEntity implements SADisplayPersistedEntity {

	private int contactid;
	private ContactType contacttype;
	private User user;
	private String value;
	private boolean enabled;
	private Date created;
	private int userid;
	private int contacttypeid;
	private boolean enableLogin;

	private static int EMAIL_CONTACT_TYPE_ID = 0;
	private static int RADIO_CONTACT_TYPE_ID = 4;
	private static String PHONE_REG_EXP = "[0-9]*[0-9]+$";
	private static String RADIO_REG_EXP = "^[a-zA-Z0-9 -]*$";
	
	public Contact() {
	}

	public Contact(int contactid, ContactType contacttype, User user,
			boolean enabled, Date created) {
		this.contactid = contactid;
		this.contacttype = contacttype;
		this.user = user;
		this.enabled = enabled;
		this.created = created;
	}

	@Id
	@Column(name = "contactid", unique = true, nullable = false)
	public int getContactid() {
		return this.contactid;
	}

	public void setContactid(int contactid) {
		this.contactid = contactid;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "contacttypeid", nullable = false, insertable = false, updatable = false)
	public ContactType getContacttype() {
		return this.contacttype;
	}

	public void setContacttype(ContactType contacttype) {
		this.contacttype = contacttype;
	}
	
	@Column(name = "contacttypeid", nullable = false)
	public int getContacttypeid(){
		return this.contacttypeid;
	}
	
	public void setContacttypeid(int contacttypeid){
		this.contacttypeid = contacttypeid;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "userid", nullable = false, insertable = false, updatable = false)
	public User getUser() {
		return this.user;
	}

	public void setUser(User user) {
		this.user = user;
	}
	
	@Column(name = "userid", nullable = false)
	public int getUserid(){
		return this.userid;
	}
	
	public void setUserid(int userid){
		this.userid = userid;
	}

	@Column(name = "enabled", nullable = false)
	public boolean isEnabled() {
		return this.enabled;
	}

	public void setEnabled(boolean enabled) {
		this.enabled = enabled;
	}
	
	@Column(name = "enablelogin", nullable = false)
	public boolean isEnableLogin() {
		return this.enableLogin;
	}

	public void setEnableLogin(boolean enableLogin) {
		this.enableLogin = enableLogin;
	}
	
	@Column(name = "value", nullable = false)
	public String getValue(){
		return this.value;
	}
	
	public void setValue(String value){
		this.value = value;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "created", nullable = false, length = 29)
	public Date getCreated() {
		return this.created;
	}

	public void setCreated(Date created) {
		this.created = created;
	}
	
	/** validateValue
	 * Validate the value of the contact based on the contacttype id
	 * @param value
	 * @return value or null
	 */
	
	private String validateValue(String value){
		if(this.contacttypeid == EMAIL_CONTACT_TYPE_ID &&
				EntityEncoder.validateEmailAddress(value)){
			return value;
		}else if(this.contacttypeid == RADIO_CONTACT_TYPE_ID &&
			value.matches(RADIO_REG_EXP)){
			return value;
		}else if(value.matches(PHONE_REG_EXP)){
			return value;
		}
		return "";
	}

	@Override
	public JSONObject toJSONObject() throws JSONException {
		JSONObject object = new JSONObject();
		object.put("contactid", this.contactid);
		object.put("contacttypeid", this.contacttypeid);
		object.put("userid", this.userid);
		object.put("enabled", this.enabled);
		object.put("created", this.created);
		object.put("value", validateValue(this.value));
		object.put("enableLogin", this.enableLogin);
		return object;
	}

}
