/**
 * Copyright (c) 2008-2016, Massachusetts Institute of Technology (MIT)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its contributors
 * may be used to endorse or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package edu.mit.ll.nics.common.entity;

// Generated Aug 19, 2013 3:24:55 PM by Hibernate Tools 4.0.0

import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

import org.hibernate.annotations.Proxy;
import org.json.JSONException;
import org.json.JSONObject;


/**
 * ResourceAssign generated by hbm2java
 */
@Entity
@Proxy(lazy=false)
@Table(name = "resource_assign", schema = "public", uniqueConstraints = @UniqueConstraint(columnNames = {
		"user_id", "operational_period_id" }))

@SequenceGenerator(
		name="SEQ_STORE",
		sequenceName="resource_assign_seq",
		allocationSize=1
		)
public class ResourceAssign extends SADisplayMessageEntity implements SADisplayPersistedEntity {

	private long id;
	private Assignment assignment;
	private UserInfo userInfo;
	private int userId;
	private boolean leader;

	public ResourceAssign() {
	}

	public ResourceAssign(long id, Assignment assignment,
			UserInfo userInfo, boolean leader) {
		this.id = id;
		this.assignment = assignment;
		this.userInfo = userInfo;
		this.leader = leader;
	}

	@Id
	@GeneratedValue(strategy=GenerationType.SEQUENCE, generator="SEQ_STORE")
	@Column(name = "id", unique = true, nullable = false)
	public long getId() {
		return this.id;
	}

	public void setId(long id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns({
		@JoinColumn(name = "unit_id", referencedColumnName = "unit_id", nullable = false),
		@JoinColumn(name = "operational_period_id", referencedColumnName = "operational_period_id", nullable = false) })
	public Assignment getAssignment() {
		return this.assignment;
	}

	public void setAssignment(Assignment assignment) {
		this.assignment = assignment;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "user_id", insertable=false, updatable=false)
	public UserInfo getUserInfo() {
		return this.userInfo;
	}

	public void setUserInfo(UserInfo userInfo) {
		this.userInfo = userInfo;
		if(this.userInfo != null) {
			this.setUserid(this.userInfo.getUserId());
		}
	}

	@Column(name = "user_id", nullable=false) 
	public int getUserid() {
		return this.userId;
	}

	public void setUserid(int userId) {
		this.userId = userId;
	}

	@Column(name = "leader", nullable = false)
	public boolean isLeader() {
		return this.leader;
	}

	public void setLeader(boolean leader) {
		this.leader = leader;
	}

	@Override
	public JSONObject toJSONObject() {
		try{ 
			JSONObject object = new JSONObject();
			object.put("id", this.id);
						
			object.put("userId", this.userId);
			
			User u = null;
			if(this.userInfo != null) {
				u = this.userInfo.getUser();
			}
			if(u != null) {
				object.put("userFirstName", (u != null) ? u.getFirstname() : "");
				object.put("userLastName", (u != null) ? u.getLastname() : "");
				object.put("userEmailAddr", (u != null) ? u.getUsername() : "");
				object.put("userPrimaryPhone", getPrimaryPhone(u));
			} else {
				object.put("userFirstName", "");
				object.put("userLastName", "");
				object.put("userEmailAddr", "");
				object.put("userPrimaryPhone", "");
			}
			
			object.put("leader", this.leader);
			return object;
		} catch(JSONException e) {}

		return null;
	}
	
	private static String getPrimaryPhone(User u) {
		String primaryPhone = "";
		if (u != null) {
			primaryPhone = getPrimaryPhone(u.getContacts());
			if (primaryPhone == null) {
				primaryPhone = "";
			}
		}
		return primaryPhone;
	}

	/**
	 * Returns the highest priority phone number found in a list of contacts.
	 * The list priority is established here in the following manner:
	 * 1. phone_cell
	 * 2. phone_office
	 * 3. phone_home
	 * 4. phone_other 
	 * @param contacts
	 * @return
	 */
	private static String getPrimaryPhone(Set<Contact> contacts) {
		String phones[] = new String[4];
		if (contacts == null || contacts.isEmpty()) {
			return null;
		}
		for (Contact c : contacts) {
			ContactType t = c.getContacttype();
			if (t != null) {
				if (t.getType().compareToIgnoreCase("phone_cell") == 0) {
					phones[0] = c.getValue();
				} else if (t.getType().compareToIgnoreCase("phone_office") == 0) {
					phones[1] = c.getValue();
				} else if (t.getType().compareToIgnoreCase("phone_home") == 0) {
					phones[2] = c.getValue();
				} else if (t.getType().compareToIgnoreCase("phone_other") == 0) {
					phones[3] = c.getValue();
				}
			}
		}
		String primaryPhone = null;
		for (int n = 0; n < phones.length; ++n) {
			if (phones[n] != null && !phones[n].isEmpty()) {
				primaryPhone = phones[n];
				break;
			}
		}
		return primaryPhone;
	}

}
